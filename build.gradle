buildscript {
  repositories {
    //maven {
    //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
    //}
    google()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0-alpha7'
    classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
  }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'
apply plugin: 'spoon'

repositories {
  //maven {
  //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
  //}
  google()
  mavenCentral()
}

def gitSha() {
  def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def gitTimestamp() {
  def p = 'git log -n 1 --format=%at'.execute([], rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def isCi = 'true'.equals(System.getenv('CI'))
def preDexEnabled = 'true'.equals(System.getProperty('pre-dex', 'true'))

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.2'

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isCi
  }

  signingConfigs {
    u2020 {
      storeFile file('u2020.keystore')
      storePassword 'android'
      keyAlias 'android'
      keyPassword 'android'
    }
  }

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 25

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    signingConfig signingConfigs.u2020

    buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
    buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"

    testInstrumentationRunner 'com.jakewharton.u2020.U2020TestRunner'
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
    }
  }

  productFlavors {
    flavorDimensions 'environment'

    internal {
      dimension 'environment'
      applicationId 'com.jakewharton.u2020.internal'
    }
    production {
      dimension 'environment'
      applicationId 'com.jakewharton.u2020'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    fatal 'UnusedResources'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
  }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
  internalDebugCompile
}

ext {
  supportLibVersion = '25.3.0'
  daggerVersion = '1.2.5'
  okhttp3Version = '3.6.0'
  retrofit2Version = '2.2.0'
  butterKnifeVersion = '8.5.1'
  leakCanaryVersion = '1.5'
  espressoVersion = '2.2.2'
}

configurations.all {
  resolutionStrategy {
    eachDependency { details ->
      // Force all of the primary support libraries to use the same version.
      if (details.requested.group == 'com.android.support') {
        details.useVersion supportLibVersion
      }
    }
  }
}

dependencies {
  compile "com.android.support:support-v4:$supportLibVersion"
  compile "com.android.support:support-annotations:$supportLibVersion"
  compile "com.android.support:appcompat-v7:$supportLibVersion"
  compile "com.android.support:recyclerview-v7:$supportLibVersion"
  compile "com.android.support:design:$supportLibVersion"

  compile "com.squareup.dagger:dagger:$daggerVersion"
  annotationProcessor "com.squareup.dagger:dagger-compiler:$daggerVersion"

  compile "com.squareup.okhttp3:okhttp:$okhttp3Version"
  compile "com.squareup.okhttp3:logging-interceptor:$okhttp3Version"
  compile 'com.squareup.okio:okio:1.11.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
  compile "com.squareup.retrofit2:retrofit:$retrofit2Version"
  compile "com.squareup.retrofit2:converter-moshi:$retrofit2Version"
  compile "com.squareup.retrofit2:adapter-rxjava:$retrofit2Version"
  compile 'com.squareup.moshi:moshi:1.4.0'
  internalDebugCompile "com.squareup.retrofit2:retrofit-mock:$retrofit2Version"

  compile "com.jakewharton:butterknife:$butterKnifeVersion"
  annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
  compile 'com.jakewharton.timber:timber:4.5.1'
  compile 'com.jakewharton.byteunits:byteunits:0.9.1'
  compile 'com.jakewharton.rxbinding:rxbinding:1.0.1'
  internalDebugCompile 'com.jakewharton.madge:madge:1.1.4'
  internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
  internalDebugCompile 'com.jakewharton:process-phoenix:1.1.1'

  internalCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
  productionCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

  compile 'io.reactivex:rxjava:1.2.4'
  compile 'io.reactivex:rxandroid:1.2.1'

  compile 'com.jakewharton.threetenabp:threetenabp:1.0.4'

  internalCompile 'com.mattprecious.telescope:telescope:2.1.0'

  compile 'com.f2prateek.rx.preferences:rx-preferences:1.0.2'

  androidTestCompile 'junit:junit:4.12'
  androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
  androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
    exclude group: 'com.android.support'
  }
  androidTestCompile 'com.android.support.test:runner:0.5'
  androidTestCompile 'com.android.support.test:rules:0.5'
  androidTestCompile 'com.squareup.spoon:spoon-client:1.7.0'

  testCompile 'junit:junit:4.12'
  testCompile 'com.google.truth:truth:0.30'
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
  installAll.dependsOn(variant.install)
  // Ensure we end up in the same group as the other install tasks.
  installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName('assemble').dependsOn variant.assemble
}
